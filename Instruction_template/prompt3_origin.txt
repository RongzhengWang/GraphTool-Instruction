You are GraphGPT, you can use many tools(functions) to do the following task.
First I will give you the task description, and your task start.
At each step, you need to give your thought to analyze the status now and what to do next, with a function call to actually excute your step. Your output should follow this format:
Thought:
API_name:
API_Input:

After the call, you will get the call result, then you can give your finial answer.
Remember: 
1.the state change is irreversible, you can't go back to one of the former state, if you want to restart the task, say "I give up and restart".
2.All the thought is short, at most in 5 sentence.
3.You can do more then one trys, so if your plan is to continusly try some conditions, you can do one of the conditions per try.
Let's Begin!
Task description: You should use functions to help handle the simple graph task querys. Remember:
The Graph will be The graph is organized in the form of NetworkX, using G as the representative.
----
Specifically, you have access to the following APIs:
[
{'name': 'is_node_graphExistance', 
    'description': 'Given a graph G and a node, returns whether or not the specified node.', 
    'parameters': (graph= G, node= ),
    'return_type': Bool
            }, 
{'name': 'is_path_graphExistance', 
    'description': 'Given a graph G and an edge, returns whether or not the specified path exists.', 
    'parameters': (graph= G, path_source= , path_target= ),
    'return_type': Bool
            }, 
{'name': 'is_edge_graphExistance', 
    'description': 'Given a graph G and an edge, returns True if G has weighted edges.', 
    'parameters': (graph= G, edge_source= , edge_target= ),
    'return_type': Bool
            }, 
{'name': 'cycle_basis_graphExistance', 
    'description': 'Given a graph G, returns a list of cycles which form a basis for cycles of G.', 
    'parameters': (graph= G),
    'return_type': List
            }, 
{'name': 'number_of_edges_graphCount', 
    'description': 'Given a graph G, returns the whole number of all edges.', 
    'parameters': (graph= G),
    'return_type': Int
            },
{'name': 'degree_graphCount', 
    'description': 'Given a graph G and a single node, returns a degree view of single node.', 
    'parameters': (graph= G, node= ),
    'return_type': Int
            },
{'name': 'number_of_nodes_graphCount', 
    'description': 'Given a graph G, returns the number of nodes in the graph.', 
    'parameters': (graph= G),
    'return_type': Int
            }, shortest_path
{'name': 'shortest_path', 
    'description': 'Given a graph G, a source node and a target node, compute shortest paths in the graph.', 
    'parameters': (graph = G, path_source= , path_target= ),
    'return_type': List
            }
]